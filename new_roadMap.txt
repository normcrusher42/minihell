Alright — here’s your exact same detailed day-by-day schedule but with emojis to make it more visual and fun without changing anything else in the text.

---

# 📅 Week 3 (Aug 14–Aug 20): Parse → Exec bridge

## 🗓 Day 1 — Command table design (Beans)

* 🛠 Create `parsing/ast.c` (or `parsing/cmd_table.c`):

  * 🗂 Define `t_redir { int type; char *arg; }` with types: IN(<), OUT(>), APP(>>), HEREDOC(<<).
  * ✏ Extend `t_cmd` in `minishell.h` to include `t_redir *redirs; int redir_count;` and `int argc;` (keep `argv`).
* 📦 From `t_token` (already produced with quote info), **split by `|` into commands**; for each command:

  * Collect words → `argv[]`, collect redir operators + targets into `redirs[]`.
  * ✅ Validate syntax: missing filename after redir, pipe at start/end, double operators.
* 📄 Deliverables:

  * `parse_command_table(t_token *tok, t_cmd **out, int *count)` returning array of commands.
  * ❌ Fails with an error message and status 258 on syntax errors (bash-like).

## 🗓 Day 2 — PATH search & argv exec (Pika)

* 🗂 Implement `exec/path.c`:

  * `char *find_command_path(const char *cmd, char **envp)` — if `cmd` contains `/`, check exec directly; else iterate `$PATH` and join dir+cmd (use `access(X_OK)`).
* 🔄 Upgrade `execute_command` (replace stub) to accept a single `t_cmd`:

  * Use `fork()`, in child `dup2()` any pre-prepared FDs (tomorrow) then `execve(realpath, argv, envp)`.
  * On `ENOENT` → 127; `EACCES` → 126; print `perror` as needed. (Today: no redirs/pipes yet.)
* 🧪 Test commands:
  `ls -l`, `echo hello`, `./miniOdy` (should print exec error unless real binary).

## 🗓 Day 3 — Builtin detection skeleton (Both)

* 🛠 Create `builtins/builtins.c`:

  * `int is_parent_builtin(const char *cmd)` → {cd, export, unset, exit}.
  * `int is_child_builtin(const char *cmd)` → {echo, pwd, env}.
* ⚙ In the executor:

  * If **single command and parent-builtin** → run in parent (no fork).
  * Else → child handles child-builtins or external `execve`.
* 🔗 Wire main loop to: tokenize → expand → *parse* → execute first command (no pipes yet).

## 🗓 Day 4 — Finish argv & status propagation (Both)

* 📊 Ensure `shell->last_exit_status` is updated after each command or pipeline front (temporary): store `WIFEXITED/WEXITSTATUS` or signal status.
* 🚫 Add basic errors:

  * Command not found → `miniOdy: foo: command not found` (127).
  * Permission denied → 126.
* 🧪 Smoke tests:

  * `foo` (127), `/bin/ls` (0), `./not_exec` (126).

---

# 📅 Week 4 (Aug 21–Aug 27): Builtins & return codes

## 🗓 Day 1 — echo/pwd/env (Beans)

* 🖨 Implement:

  * `echo [-n*]` (treat multiple `-n` as valid): print with/without trailing newline.
  * `pwd` (use `getcwd`).
  * `env` (print `envp` lines exactly; reject args with non-option text by exiting 0 and ignoring extra per subject).
* 🧪 Unit tests:

  * `echo -n hello` → `hello` with no newline.
  * `pwd` matches `getcwd`.
  * `env` prints all; `env foo` prints env (ignore extra).

## 🗓 Day 2 — cd/export/unset/exit (Pika)

* 📂 `cd [path]`:

  * With arg: `chdir`; on success update `PWD`, `OLDPWD` via `set_env_value()`; on failure print `miniOdy: cd: msg`, return 1.
* 📤 `export` (no options): with `KEY=VAL` pairs:

  * Validate identifier; update env using `set_env_value`. With no args, print sorted env in `declare -x` format (optional).
* 🗑 `unset` (no options): remove keys via `unset_env_value`.
* 🚪 `exit`:

  * No args → exit with last status.
  * One numeric arg → exit with that (mod 256).
  * Non-numeric or more args → bash-like messages (2 for non-numeric; 1 for too many args without exiting).

## 🗓 Day 3 — Status & signals polish (Both)

* ⚡ Parent should **not** exit on child SIGINT/SIGQUIT; set `last_exit_status = 128 + signal`.
* ⌨ Interactive behavior:

  * Ctrl-C shows new prompt; Ctrl-\ does nothing; Ctrl-D exits. Already matched in `signals.c`; ensure exec-time signals reset to default in child.

## 🗓 Day 4 — Acceptance suite v1 (Both)

* 🧪 Script a set of commands to verify builtins + PATH + statuses.
* 🧹 Fix any leaks identified (exclude readline).

---

# 📅 Week 5 (Aug 28–Sept 3): Pipes & Redirections

## 🗓 Day 1 — Pipes skeleton (Beans)

* ➡ Add `exec/pipeline.c`:

  * `int run_pipeline(t_cmd *cmds, int n, char **envp, t_shell *sh)`.
  * For i in \[0..n-1]: create pipe (except last), fork:

    * Child: set `dup2(prev_read, STDIN)` if i>0; set `dup2(pipe_write, STDOUT)` if i\<n-1; close unused; run builtin/exec.
    * Parent: close write end immediately; carry read end to next loop; collect PIDs.
  * After loop: close last read; wait all; set final `last_exit_status`.

## 🗓 Day 2 — Redirections (Pika)

* 📂 Implement `exec/redir.c`:

  * Open modes: `<` O\_RDONLY; `>` O\_WRONLY|O\_CREAT|O\_TRUNC; `>>` O\_WRONLY|O\_CREAT|O\_APPEND.
  * In child before exec: apply redirs with `dup2(fd, STDIN/STDOUT)`; on open error, print and exit with 1.

## 🗓 Day 3 — Integrate pipes + redirs + builtins (Both)

* 🔄 Rules:

  * Parent-builtins only run in parent **when single command & no pipe**; otherwise run them in child.
  * Child-builtins run anywhere.
* 🧪 Test:

  * `echo hi | wc -c`
  * `cat < in | grep a > out`
  * `echo hi >> out && echo bye >> out`

## 🗓 Day 4 — Error handling & msgs (Both)

* 🚫 Missing file for `<`: `miniOdy: file: No such file or directory`, exit 1 for that child.
* Permission on output: 1/126 depending on errno; align with bash.

---

# 📅 Week 6 (Sept 4–Sept 10): Heredoc + Edge cases

## 🗓 Day 1 — Heredoc reader (Beans)

* 📜 `exec/heredoc.c`:

  * For each `<< delim`: before forking pipeline, create a pipe; read lines until **exact** delimiter (no expansion inside if quoted; expand if unquoted).
  * ❌ Do **not** add to history.
  * Ctrl-C during heredoc aborts and sets status 130.

## 🗓 Day 2 — Redir + heredoc interplay (Pika)

* 🔄 Apply heredoc pipe as command’s STDIN, but still allow later `<` to override per POSIX order (last redir wins).
* 🧹 Clean up temp FDs.

## 🗓 Day 3 — Quote/expansion corner cases (Both)

* 📏 Ensure expansion respects quotes:

  * Single quotes block `$` expansion; double quotes allow it.
* ✂ Keep `remove_quotes()` after expansion.
* 🚫 Detect unclosed quotes at tokenize stage.

## 🗓 Day 4 — Full pipeline stress (Both)

* 🧪 Test:

  * `cat <<EOF | grep a | wc -l`
  * `echo "$USER-$?" | tr a-z A-Z`
  * `grep x < notfound | wc`

---

# 📅 Week 7 (Sept 11–Sept 15): Integration, Norm, Defense

## 🗓 Day 1 — Cleanup & Norm (Both)

* 🧹 Remove debug prints, ensure file layout matches Makefile.
* ✂ Split long functions to satisfy Norm.

## 🗓 Day 2 — Memory & FDs (Both)

* 🔍 Valgrind each scenario; ensure:

  * All mallocs freed each loop iteration.
  * FDs always closed on both success and error paths.

## 🗓 Day 3 — Defense kit & final pass (Both)

* 📜 Prepare a demonstration script covering **every** subject bullet.
* 📄 Add `README.md` with build/run, supported features, known limitations.

---

Do you want me to also make you a **color-coded emoji Gantt chart** of this schedule so you can visually see Beans’ vs Pika’s work streams? That would make it easier to follow.
